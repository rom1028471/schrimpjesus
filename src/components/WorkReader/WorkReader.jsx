import React, { useState, useRef, useEffect, useLayoutEffect, useCallback } from 'react';
import Header from '../Header/Header';
import './WorkReader.css';
import { useTheme } from '../../contexts/ThemeContext';
import { useReadingState } from '../../hooks/useReadingState';
import { useAudioTrigger } from '../../hooks/useAudioTrigger';

const VISIBILITY_OFFSET = 0.2; // 20% –∑–∞–ø–∞—Å
const MAX_WIDTH = 900;

const WorkReader = ({ work, onBack }) => {
  const { theme } = useTheme();
  const [headerVisible, setHeaderVisible] = useState(true);
  const [activeImage, setActiveImage] = useState(null); // {file, idx, height}
  const [windowHeights, setWindowHeights] = useState({}); // {i: px}
  const scrollRef = useRef(null);
  const windowRefs = useRef([]);
  const imageHeights = useRef({}); // {i: px}
  const base = import.meta.env.DEV ? '/schrimpjesus/' : (import.meta.env.BASE_URL || '/');
  const [headerHeight, setHeaderHeight] = useState(0);
  const headerEl = useRef(null);

  const { readingState, updateReadingState } = useReadingState(work.id);
  const { triggerAudio } = useAudioTrigger();

  // –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É —Ö–µ–¥–µ—Ä–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  useEffect(() => {
    const updateHeaderHeight = () => {
      if (headerEl.current) {
        const height = headerEl.current.offsetHeight;
        setHeaderHeight(height);
      }
    };
    
    updateHeaderHeight();
    window.addEventListener('resize', updateHeaderHeight);
    return () => window.removeEventListener('resize', updateHeaderHeight);
  }, [headerVisible]);

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ image-—Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–∑–¥–∞—ë–º offscreen img –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
  useEffect(() => {
    work.blocks.forEach((block, i) => {
      if (block.type === 'image') {
        const img = new window.Image();
        const imagePath = `${base}assets/images/${block.imageFile}`;
        img.src = imagePath;
        img.onload = () => {
          imageHeights.current[i] = img.naturalHeight;
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
          work.blocks[i].naturalWidth = img.naturalWidth;
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Å —É—á–µ—Ç–æ–º padding 2vw —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
          const containerWidth = scrollRef.current?.offsetWidth || window.innerWidth;
          const maxWidth = Math.min(MAX_WIDTH, containerWidth);
          const actualWidth = Math.min(img.naturalWidth, maxWidth);
          const actualHeight = (actualWidth / img.naturalWidth) * img.naturalHeight;
          const windowHeight = actualHeight * 1.3;
          
          setWindowHeights(prev => ({ ...prev, [i]: windowHeight }));
        };
        img.onerror = () => {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ${i}: ${block.imageFile} –ø–æ –ø—É—Ç–∏ ${imagePath}`);
        };
      }
    });
  }, [work, base]);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    work.blocks.forEach((block, i) => {
      if (block.type === 'image' && imageHeights.current[i]) {
        const containerWidth = scrollRef.current?.offsetWidth || window.innerWidth;
        const maxWidth = Math.min(MAX_WIDTH, containerWidth);
        const actualWidth = Math.min(block.naturalWidth || 700, maxWidth);
        const actualHeight = (actualWidth / (block.naturalWidth || 700)) * imageHeights.current[i];
        setWindowHeights(prev => ({ ...prev, [i]: actualHeight * 1.3 }));
      }
    });
  }, [work]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ refs –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
  useEffect(() => {
    const checkRefs = () => {
      const imageBlocks = work.blocks.filter(block => block.type === 'image');
      imageBlocks.forEach((block, blockIndex) => {
        const globalIndex = work.blocks.findIndex(b => b === block);
        const ref = windowRefs.current[globalIndex];
      });
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    checkRefs();
    const timer = setTimeout(checkRefs, 100);
    return () => clearTimeout(timer);
  }, [work, windowHeights]);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  const handleScrollRef = useRef();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ work
  useEffect(() => {
    handleScrollRef.current = () => {
      const viewportHeight = window.innerHeight;
      let found = null;
      
      const imageBlocks = work.blocks.filter(block => block.type === 'image');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ refs –≥–æ—Ç–æ–≤—ã
      const allRefsReady = imageBlocks.every((block, blockIndex) => {
        const globalIndex = work.blocks.findIndex(b => b === block);
        const ref = windowRefs.current[globalIndex];
        return ref !== null;
      });
      
      if (!allRefsReady) {
        return;
      }
      
      // –ò—â–µ–º –æ–∫–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (100% –Ω–∏–∂–µ viewport)
      imageBlocks.forEach((block, blockIndex) => {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –≤ –æ–±—â–µ–º –º–∞—Å—Å–∏–≤–µ
        const globalIndex = work.blocks.findIndex(b => b === block);
        const ref = windowRefs.current[globalIndex];
        
        if (!ref) {
          return;
        }
        
        const rect = ref.getBoundingClientRect();
        const activationZone = viewportHeight; // 100% –æ—Ç –≤—ã—Å–æ—Ç—ã viewport
        
        // –û–∫–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –µ–≥–æ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100% –Ω–∏–∂–µ viewport
        // –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–Ω–æ —É—Ö–æ–¥–∏—Ç –≤—ã—à–µ —ç—Ç–æ–π –∑–æ–Ω—ã
        const isInActivationZone = rect.top <= viewportHeight + activationZone && rect.bottom >= 0;
        
        if (isInActivationZone) {
          found = globalIndex;
        }
      });
      
      if (found !== null && work.blocks[found]?.type === 'image') {
        const newActiveImage = {
          file: work.blocks[found].imageFile,
          idx: found,
          height: imageHeights.current[found] || (scrollRef.current?.offsetWidth * 0.7) || 300
        };
        setActiveImage(newActiveImage);
      } else {
        setActiveImage(null);
      }
    };
  }, [work]);

  // –°–ª–µ–¥–∏–º –∑–∞ —Å–∫—Ä–æ–ª–ª–æ–º - —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    // –°–ª—É—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –∞ –Ω–µ –Ω–∞ window
    const handleScroll = () => {
      handleScrollRef.current();
    };
    
    const scrollContainer = scrollRef.current;
    
    if (scrollContainer) {
      scrollContainer.addEventListener('scroll', handleScroll, { passive: true });
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã refs —É—Å–ø–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      const timer = setTimeout(handleScroll, 100);
      
      return () => {
        scrollContainer.removeEventListener('scroll', handleScroll);
        clearTimeout(timer);
      };
    }
  }, [work]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç work

  // –ê—É–¥–∏–æ —Ç—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  useEffect(() => {
    if (activeImage) {
      triggerAudio(activeImage.file);
      updateReadingState(activeImage.idx);
    }
  }, [activeImage, triggerAudio, updateReadingState]);

  const winHeight = window.innerHeight;

  return (
    <div className={`work-reader ${theme}`}>
      <div 
        ref={headerEl} 
        className="workreader-header-container"
        style={{ 
          position: 'fixed', 
          top: 0, 
          left: 0, 
          right: 0, 
          zIndex: 1000,
          transform: headerVisible ? 'translateY(0)' : 'translateY(-100%)',
          transition: 'transform 0.3s ease'
        }}
      >
        <Header
          title={work.title}
          subtitle={`${work.author} ‚Ä¢ ${work.genre}`}
          showBack={true}
          onBack={onBack}
          isOpen={true}
        >
          {headerVisible && (
            <button className="hide-header-button" onClick={() => setHeaderVisible(false)}>
              ‚Üë –°–∫—Ä—ã—Ç—å –º–µ–Ω—é
            </button>
          )}
        </Header>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ö–µ–¥–µ—Ä ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
      {!headerVisible && (
        <button className="show-header-button fixed-show-header" onClick={() => setHeaderVisible(true)}>
          ‚Üì
        </button>
      )}
      
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ */}
      {activeImage ? (
        <div
          className="workreader-fixed-bg"
          style={{
            top: headerVisible ? headerHeight : 0,
            height: `calc(100vh - ${headerVisible ? headerHeight : 0}px)`
          }}
        >
          <div className="workreader-img-container">
            <img
              src={`${base}assets/images/${activeImage.file}`}
              alt=""
              className="workreader-bg-img"
              draggable={false}
              loading="lazy"
            />
          </div>
        </div>
      ) : null}
      
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {console.log('üîß –†–µ–Ω–¥–µ—Ä - activeImage:', activeImage?.file, 'headerVisible:', headerVisible)}
      
      {/* –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–≤–µ—Ä—Ö—É –¥–ª—è —Ö–µ–¥–µ—Ä–∞ */}
      <div 
        className="workreader-scroll" 
        ref={scrollRef} 
        style={{ 
          transform: headerVisible ? `translateY(${headerHeight}px)` : 'translateY(0)',
          transition: 'transform 0.3s ease, height 0.3s ease',
          height: headerVisible ? `calc(100vh - ${headerHeight}px)` : '100vh'
        }}
      >
        {work.blocks.map((block, i) => {
          if (block.type === 'text') {
            return (
              <div className="workreader-block no-radius" key={i}>{block.content}</div>
            );
          }
          if (block.type === 'image') {
            // –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ = 1.3 * –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–∏–ª–∏ 0.8 * —à–∏—Ä–∏–Ω–∞ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏)
            const winHeight = windowHeights[i] || scrollRef.current?.offsetWidth * 0.8 || '80vw';
            console.log(`üèóÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ${i} (${block.imageFile}) —Å –≤—ã—Å–æ—Ç–æ–π:`, winHeight);
            return (
              <div
                className="workreader-window"
                key={i}
                ref={el => {
                  windowRefs.current[i] = el;
                }}
                style={{ height: winHeight }}
              />
            );
          }
          return null;
        })}
        
        {/* –ë–ª–æ–∫ –∫–æ–Ω—Ü–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
        <div className="workreader-footer">
          <div className="footer-content">
            <p>¬© 2025 SchrimpJesus. –í—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WorkReader;
